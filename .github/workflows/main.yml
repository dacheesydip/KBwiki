name: Convert RST to HTML

on:
  push:
    paths:
      - '**.rst'
  pull_request:
    paths:
      - '**.rst'

jobs:
  convert-rst-to-html:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install docutils
        
    - name: Get changed RST files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files: |
          **.rst
          
    - name: Convert RST files to HTML
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        # Create conversion script
        cat > convert_rst.py << 'EOF'
        import os
        import sys
        from docutils.core import publish_file
        from docutils.writers.html4css1 import Writer, HTMLTranslator
        from docutils.parsers.rst import directives
        from docutils import nodes
        import re
        
        def convert_rst_to_html(rst_file):
            # Determine output HTML file path
            html_file = os.path.splitext(rst_file)[0] + '.html'
            
            # Read RST content and preprocess it to preserve HTML
            with open(rst_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Find HTML blocks and wrap them with raw directive
            # Pattern to match HTML tags and blocks
            html_patterns = [
                # Match complete HTML tags with content
                r'(<[a-zA-Z][^>]*>.*?</[a-zA-Z][^>]*>)',
                # Match self-closing tags
                r'(<[a-zA-Z][^>]*/>)',
                # Match simple HTML tags
                r'(<[a-zA-Z][^>]*>[^<]*</[a-zA-Z][^>]*>)'
            ]
            
            processed_content = content
            
            for pattern in html_patterns:
                def wrap_html_block(match):
                    html_content = match.group(1)
                    # Indent the HTML content for the raw directive
                    indented_html = '\n'.join('   ' + line for line in html_content.split('\n'))
                    return f'\n\n.. raw:: html\n\n{indented_html}\n\n'
                
                processed_content = re.sub(pattern, wrap_html_block, processed_content, flags=re.DOTALL | re.MULTILINE)
            
            # Write processed content to temporary file
            temp_rst = rst_file + '.tmp'
            with open(temp_rst, 'w', encoding='utf-8') as f:
                f.write(processed_content)
            
            try:
                # Convert to HTML using docutils
                with open(temp_rst, 'rb') as source:
                    with open(html_file, 'wb') as destination:
                        publish_file(
                            source=source,
                            destination=destination,
                            writer_name='html',
                            settings_overrides={
                                'input_encoding': 'utf-8',
                                'output_encoding': 'utf-8',
                                'embed_stylesheet': False,
                                'raw_enabled': True,
                                'file_insertion_enabled': False,
                                'halt_level': 2,
                                'report_level': 2,
                                'doctitle_xform': False,
                                'initial_header_level': 1,
                            }
                        )
                print(f"✓ Converted {rst_file} to {html_file}")
                return html_file
            except Exception as e:
                print(f"✗ Error during conversion: {e}")
                # Try without preprocessing as fallback
                with open(rst_file, 'rb') as source:
                    with open(html_file, 'wb') as destination:
                        publish_file(
                            source=source,
                            destination=destination,
                            writer_name='html',
                            settings_overrides={
                                'input_encoding': 'utf-8',
                                'output_encoding': 'utf-8',
                                'embed_stylesheet': False,
                                'raw_enabled': True,
                                'file_insertion_enabled': False,
                                'halt_level': 3,
                                'report_level': 3,
                            }
                        )
                print(f"✓ Converted {rst_file} to {html_file} (fallback mode)")
                return html_file
            finally:
                # Clean up temporary file
                if os.path.exists(temp_rst):
                    os.remove(temp_rst)
        
        if __name__ == "__main__":
            changed_files = sys.argv[1:]
            converted_files = []
            
            for rst_file in changed_files:
                if rst_file.endswith('.rst') and os.path.exists(rst_file):
                    try:
                        html_file = convert_rst_to_html(rst_file)
                        converted_files.append(html_file)
                    except Exception as e:
                        print(f"✗ Error converting {rst_file}: {e}")
                        sys.exit(1)
            
            # Output list of converted files for next step
            if converted_files:
                with open('converted_files.txt', 'w') as f:
                    f.write('\n'.join(converted_files))
        EOF
        
        # Run conversion on changed files
        python convert_rst.py ${{ steps.changed-files.outputs.all_changed_files }}
        
    - name: Commit and push changes
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add converted HTML files
        if [ -f "converted_files.txt" ]; then
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              git add "$file"
              echo "Added $file to git"
            fi
          done < converted_files.txt
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-update HTML files from RST changes
            
            Updated files:
            $(cat converted_files.txt | sed 's/^/- /')"
            
            git push
          fi
        fi
